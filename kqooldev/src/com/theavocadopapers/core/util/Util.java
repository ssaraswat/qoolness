/*
 * Created on Apr 13, 2004
 * Copyright (c) 2004 Steve Schneider.  All rights reserved.
 */
package com.theavocadopapers.core.util;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import com.theavocadopapers.apps.kqool.util.GeneralUtils;



/**
 * @author sschneider
 *
 */
public class Util {
	
	
	private static final String DB_ENCRYPTION_PREFIX="="; // = works because this char never appears in encrypted values generated by GeneralUtils.
	
	/**
	 * Can't instantiate this class.
	 *
	 */
	private Util() {}
	
	public static Date getDate(final int year, final int month, final int date, final int hourOf24HourDay, final int minute, final int second, final int millisecond) {
		if (
				month<0 || month>11 ||
				date<0 || date>31 ||
				hourOf24HourDay<0 || hourOf24HourDay>23 ||
				minute<0 || minute>59 ||
				second<0 || second>59 ||
				millisecond<0 || millisecond>999			
		) {
			throw new IllegalArgumentException("Invalid param passed (year="+year+"; month="+month+"; date="+date+"; hour="+hourOf24HourDay+"; minute="+minute+"; second="+second+"; millisecond="+millisecond+")");
		}
		final GregorianCalendar cal=new GregorianCalendar(year, month, date, hourOf24HourDay, minute, second);
		cal.set(Calendar.MILLISECOND, millisecond);
		return cal.getTime();
	}

	public static Date getDate(final int year, final int month, final int date, final int hourOf24HourDay, final int minute, final int second) {
		return getDate(year, month, date, hourOf24HourDay, minute, second, 0);
	}

	public static Date getDate(final int year, final int month, final int date, final int hourOf24HourDay, final int minute) {
		return getDate(year, month, date, hourOf24HourDay, minute, 0, 0);
	}

	public static Date getDate(final int year, final int month, final int date) {
		return getDate(year, month, date, 0, 0, 0, 0);
	}
	
	
	public static Calendar getCalendar(final Date date) {
		final GregorianCalendar cal=new GregorianCalendar();
		cal.setTime(date);
		return cal;
	}
	public static Calendar getCalendar(final long timeInMillis) {
		return getCalendar(new Date(timeInMillis));
	}
	
	public static Object notNull(final Object o, final Object defaultVal) {
		if (o!=null) {
			return o;
		}
		if (defaultVal==null) {
			throw new NullPointerException("defaultVal cannot be null.");
		}
		return defaultVal;
	}
	
	public static String notNull(final String s, final String defaultVal) {
		return notNull(s, defaultVal);
	}
	
	public static String notNull(final String s) {
		return notNull(s, "");
	}
	
	public static String databaseEncrypt(final String s) throws DatabaseEncryptionException {
		if (s.startsWith(DB_ENCRYPTION_PREFIX)) {
			return new String(s);
		}
		return DB_ENCRYPTION_PREFIX+GeneralUtils.wEncrypt(s);
	}
	
	/** Decrypts a value from the database; note that if the value wasn't encrypted to begin with, it will just return it unchanged.
	 * @param s
	 * @return
	 * @throws DatabaseEncryptionException
	 */
	public static String databaseDecrypt(final String s) throws DatabaseEncryptionException {
		if (s==null) {
			return s;
		}
		if (!s.startsWith(DB_ENCRYPTION_PREFIX)) {
			return new String(s);
		}
		return GeneralUtils.wDecrypt(s.substring(DB_ENCRYPTION_PREFIX.length(), s.length()));
	}
	
	


	


	public static int randomInt(final int upToNotInclusive) {
		final double rnd=Math.random()*upToNotInclusive;
		int ret=(int)Math.floor(rnd);
		if (ret==upToNotInclusive) {
			ret=0;
		}
		return ret;
	}
	



}
